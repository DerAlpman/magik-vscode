_package sw
$

# Block indenting - no linting here!
_block
	_local var << "hello"

	_if _true
	_then
		do_something()
	_endif

	_for i _over range(1, 10)
	_loop
		write(i)
	_endloop

	new_proc << _proc(var)
			write(var)
		_endproc

	new_proc_2 << _proc(var)
			_if something
			_then
				do_something()
			_endif
		_endproc

	multiline <<
		"hello"

	multiline_2 << "hello" +
		"world"

	multiline_3 << _if _true
		_then
			>> "hello"
		_endif # 2 tab indent

_endblock
$

_method vs_test.indent_test() # complex method error

	_local var << "hello"

	_if _true
	_then
		do_something()
	_endif

	_for i _over range(1, 10)
	_loop
		write(i)
	_endloop

	somthing(_true, _unset, _false, _maybe, _self)

	new_proc << _proc(var)
			write(var)
		_endproc

	new_proc_2 << _proc(var)
			_if _true
			_then
				do_something()
			_endif
		_endproc

	new_proc_3 << _proc(not_used) write(not_defined) _endproc # comment

	multiline <<
		"hello"

	multiline_2 << "hello" +
		"world"

	multiline_3 << _if _true
		_then
			>> "hello"
		_endif

	>> _if level_1
		_then
			>> _if level_2
				_then
					>> "hello"
				_endif
		_endif

	>> _over range(1, 10)
		_loop
			_leave _with "hello"
		_endloop

	new_var <<
		_if _true
		_then
			>> _for i _over {}.elements()
				_loop
					_leave _with "hello"
				_endloop
		_endif

	new_var_2 << _if _true
		_then
			new_var_3 << _if _true
				_then
					>> "hello"
				_endif
			>> "hello world" # 3 tab indent
		_endif # 2 tab indent

	new_var_4 << _if something _andif
			something_else _andif
			another # 3 tab indent
		_then
			>> "hello"
		_endif

	_if something _andif
		something_else
	_then
		do_something()
	_endif

	_for i _over {}.fast_elements()
	_loop
		_loopbody(i)
	_endif

	_if something _orif
		something_else _orif
		another
	_then
		# here
	_endif

_endmethod
$

_method vs_test.assign_test()

	pl << property_list.new_with(:a, 1, :b, 2)
	pl[:a] << "hello"

	ht << hash_table.new()
	ht[r] << 1 # r not defined

	something.name << "hello"

	first << "world"
	my_proc(first, second << "hello")

_endmethod
$

_method vs_test.assign_test_2()

	_if ( something << _self.name() ) _isnt _unset # name() not defined
	_then
		_return something.name
	_endif

_endmethod
$

_method vs_test.bracket_indenting()

	a << {
		{"hello"},
		{"world"}
		}
	a[1]
_endmethod
$

_method vs_test.assign_value_on_newline()

	new_var <<
		new_var_2 <<
		another <<
		"hello" # Should be same indent new_var_2 (2 tabs)

	new_var_3 <<
		_if level_1
		_then
			new_var_4 <<
				# comment - 4 tab indent
				_if level_2
				_then
					>> "hello"
				_endif
			>> "hello world"
		_endif

	new_var_5 <<
		new_var_6 <<
		_if _true
		_then
			>> "hello"
		_endif # 2 tab indent

	new_var_7 <<
		_if something _and
			something_else _and
			another
		_then
			>> _maybe
		_endif

_endmethod
$

_method vs_test.try_and_protect()

	_try _with cond
		# some code

	_when error
		write(cond.report_contents_string)
	_endtry

	_protect
		# here
	_protection
		# here
	_endprotect

_endmethod
$

_method vs_test.catch_and_block()

	_catch

	_endcatch

	something << _catch :here
			_handling error
			_with _proc() _endproc
			>> "hello"
		_endcatch # 2 tab indent

	something_else << _block
			>> "hello"
		_endblock # 2 tab indent

_endmethod
$

_method vs_test.lock_test()

	_lock
		# comment
	_endlock

	a_var << _lock
			# 3 tab indent
			>> "hello"
		_endlock

_endmethod
$

_method vs_test.operator_at_end

	a << b >=
		c # 2 tab indent

	a << b >
		c

	a << b <
		c

_endmethod
$

_method vs_test.proc_in_method()

	a_proc << _proc(proc_param)
			proc_param.proc_param_is_used()
		_endproc

	a_proc() # used proc

_endmethod
$

_method vs_test.proc_import()

	_local me << _self # Not used
	a_proc << _proc()
			_import me

		_endproc

	a_proc_2 << _proc()
			_import me2 # Not defined

		_endproc

	_local me3 << _self
	a_proc_3 << _proc()
			me3.write_string # Doesn't spot missing import
		_endproc

_endmethod
$

_method vs_test.return_proc()

	>> _proc()
			# here
		_endproc

	>> _proc()
			_if something _orif
				something_else _orif
				another # 4 tab indent
			_then
			_endif
		_endproc

_endmethod
$

_method vs_test.check_defined_var()

	a<<"hello"
	a.something()

_endmethod
$

_method vs_test.check_undefined_var_index()

	something(:not_defined, not_defined)

_endmethod
$

_method vs_test.used_var()

	_if (new_var << "hello") _isnt _unset
	_then
		_return new_var.hello
	_endif

_endmethod
$

_method vs_test.unused_var()

	(a, not_used) << do_something()
	a.hello()

_endmethod
$

# proc indenting
_global a_proc << _proc(var1)
		# Comment
		do_something()
	_endproc
$

_global proc_2 <<
	_proc()
		do_something()
	_endproc
$

_method vs_test.dynamic_test()

	_dynamic !not_used_but_ok!
	_dynamic !defined! << "hello"
	_dynamic !used!
	!used! << 1

_endmethod
$

_method vs_test.global_test()
	_global bob # defined but not used

	_global another
	another.hello

_endmethod
$

_method vs_test.local_test()

	_local var_1
	_local var_2, var_3, var_4

	var_1.hello()
	var_2.hello()
	var_3.hello()

	a << "hello"
	a.size

	_local b
	b.size

	_local c
	c << 1 # defined not used

_endmethod
$

_method vs_test.undefined_method()

	r << rope.new()
	r.add_last()
	r.name() # method not defined

	l << sw_label_item.new(_unset, "Hello")
	l.label << "Hello again"

	t << concurrent_hash_map.new()
	t[:hello] << "Hello"

_endmethod
$

_method vs_test.remove_strings()

	# Ignores words in string
	# Finds start of method correctly
	write("a_string _method another.string()")

	something("a << something.hello()")

_endmethod
$

_method vs_test.symbol_with_pipes()

	a_var << :|hello world|
	a_var2 << :hello_world|()|

_endmethod
$

_method vs_test.unused_param(param_1)
	## empty
_endmethod
$

_method vs_test.assigment_test()

	# b and c not used

	(a,b) << hello_world()
	a.something()

	(c,d) << hello_world()
	d.something()

_endmethod
$

_method vs_test.no_brackets
	##

	_if _true
	_then
		# here
	_endif

_endmethod
$

_method vs_test.name << a_name

	a_name.hello()
_endmethod
$

_method vs_test.array[a, b] << c # param b not used
	a.hello(c)
_endmethod
$

_method vs_test.local_var_of_class_name

	plugin << "hello"
	plugin.something()

	_global frame # Declared global can be used as local
	frame.write_string

_endmethod
$

# private basic
_pragma(classify_level=basic, topic=vs_test, usage=external)
_private _method vs_test.private()

_endmethod
$

_iter _method vs_test.iter_test()

	_over range(1, 10)
	_loop
		_loopbody("hello")
	_endloop
_endmethod
$

_method vs_test.anno_test()

	a << test() # @class sw_container
	a.layout_children()

	(b, c) << something() # @class plugin, gui_framework
	b.add_action()
	c.current_layout_name

	_local d # @class rope
	d.add_all_first()

_endmethod
$

_abstract _method vs_test.abstract_test()

_endmethod
$

_method vs_test.check_long_method()
	a << 1
	a +<< 1
	a +<< 1
	a +<< 1
	a +<< 1
	a +<< 1
	a +<< 1
	a +<< 1
	a +<< 1
	a +<< 1
	a +<< 1
	a +<< 1
	a +<< 1
	a +<< 1
	a +<< 1
	a +<< 1
	a +<< 1
	a +<< 1
	a +<< 1
	a +<< 1
	a +<< 1
	a +<< 1
	a +<< 1
	a +<< 1
	a +<< 1
	a +<< 1
	a +<< 1
	a +<< 1
	a +<< 1
	a +<< 1
	a +<< 1
	a +<< 1
	a +<< 1
	a +<< 1
	a +<< 1
	a +<< 1
	a +<< 1
	a +<< 1
	a +<< 1
	a +<< 1
	write(a)
_endmethod
$
